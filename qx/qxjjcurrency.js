/*
 * Êú™ÁªèÊéàÊùÉ‰∏çÂæó‰º†Êí≠„ÄÅ‰øÆÊîπÊàñËΩ¨ÂîÆ„ÄÇËÑöÊú¨Êõ¥Êñ∞ËØ∑‰ª•‰ΩúËÄÖÊèê‰æõÁöÑÊúÄÊñ∞ÁâàÊú¨‰∏∫ÂáÜ„ÄÇ
 * Ëã•ÈúÄËé∑ÂèñÊõ¥Êñ∞ÊàñÈÅáÂà∞ÈóÆÈ¢òÔºåËØ∑ÈÄöËøáÂéüË¥≠‰π∞Ê∏†ÈÅìËÅîÁ≥ª‰ΩúËÄÖÔºåÊàñËÆøÈóÆÁΩëÁ´ôÔºöhttps://kunlineaten.notion.site
 */

const IDENTIFICATION = $prefs.valueForKey("JJ_IDENTIFICATION") || "";
const aSIGN         = $prefs.valueForKey("JJ_aSIGN") || "";
const UA            = $prefs.valueForKey("JJ_UA") || "";
const APPDEVICE     = $prefs.valueForKey("JJ_APPDEVICE") || "";
const SMDEVICEID    = $prefs.valueForKey("JJ_SMDeviceID") || "";
const READERID      = $prefs.valueForKey("JJ_READERID") || "";
const versionCode   = 672;
const hostOrigin    = "http://app.jjwxc.org";
const welfare_exchange_id = 200;
const number = 8;

if (!aSIGN || !UA || !APPDEVICE || !SMDEVICEID || !READERID || !IDENTIFICATION) {
  console.log("‚ùå Áº∫Â∞ëÂøÖË¶ÅÂèÇÊï∞ÔºÅ");
  console.log("aSIGN: " + aSIGN);
  console.log("UA: " + UA);
  console.log("APPDEVICE: " + APPDEVICE);
  console.log("SMDEVICEID: " + SMDEVICEID);
  console.log("READERID: " + READERID);
  console.log("IDENTIFICATION: " + IDENTIFICATION);
  $notify("‚ùå Áº∫Â∞ëÂøÖË¶ÅÂèÇÊï∞", "", "ËØ∑ÂÖàËøêË°å cookie.js ÊäìÂåÖËÑöÊú¨");
  $done();
}

const url = `${hostOrigin}/newWelfareIos/executeExchange`
  + `?identification=${encodeURIComponent(IDENTIFICATION)}`
  + `&number=${encodeURIComponent(number)}`
  + `&sign=${encodeURIComponent(aSIGN)}`
  + `&versionCode=${encodeURIComponent(versionCode)}`
  + `&welfare_exchange_id=${encodeURIComponent(welfare_exchange_id)}`;

const headers = {
  'readerid': READERID,
  'Connection': 'keep-alive',
  'Accept-Encoding': 'br;q=1.0, gzip;q=0.9, deflate;q=0.8',
  'APPDEVICE': APPDEVICE,
  'versiontype': 'reading',
  'source': 'ios',
  'User-Agent': UA,
  'versionCode': String(versionCode),
  'platformType': 'iOS',
  'SMDeviceID': SMDEVICEID,
  'Host': 'app.jjwxc.org',
  'Accept-Language': 'zh-Hant-CN;q=1.0, en-CN;q=0.9, zh-Hans-CN;q=0.8, ja-CN;q=0.7',
  'Accept': '*/*',
  'sign': aSIGN
};

const req = { url, method: 'GET', headers };
console.log("üöÄ URL:\n" + url);
console.log("üì§ Headers:\n" + JSON.stringify(headers, null, 2));

$task.fetch(req).then(resp => {
  console.log("üì• Body:\n" + resp.body);
  try {
    const o = JSON.parse(resp.body || "{}");
    if (code === "200") {
      $notify("‚úÖ ÂÖëÊç¢ÊàêÂäü", "", o.message || "OK");
      $done({ status: resp.statusCode, body: bodyText });
      return;
    }

    if (code === "190014") {
     // ‰∏çÈáçËØïÔºåÁî±Â§ñÂ±ÇÂÆöÊó∂‰ªªÂä°Êàñ‰∫∫Â∑•ÂÜçÊ¨°ÊâßË°å
      $notify("‚è≥ Ê¥ªÂä®ÁÅ´ÁàÜÔºåÁ®çÂêéÂÜçËØï", "", o.message || "190014ÔºöËØ∑‰∏ã‰∏™Â∞èÊó∂ÂÜçÊù•ÂèÇ‰∏é");
      $done({ status: resp.statusCode, body: bodyText });
      return;
    }

    if (code === "190016") {
      $notify("‚ÑπÔ∏è Êú¨ÊúüÂ∑≤ÂÖëÊç¢", "", o.message || "190016ÔºöÁúãÁúãÂÖ∂‰ªñÂ•ñÂìÅÂêß");
      $done({ status: resp.statusCode, body: bodyText });
      return;
    }

    if (code === "190005") {
      $notify("üìÖ Ê¥ªÂä®Êú™ÂºÄÂßãÊàñÂ∑≤ÁªìÊùü", "", o.message || "190005ÔºöËØ∑Á°ÆËÆ§Ê¥ªÂä®Êó∂Èó¥");
      $done({ status: resp.statusCode, body: bodyText });
      return;
    }

    if (code === "1004") {
      $notify("üîí ÁôªÂÖ•È™åËØÅÂ§±Ë¥•", "", o.message || "1004ÔºöËØ∑Ê£ÄÊü• sign/ÁâàÊú¨Âè∑/ÂüüÂêç/Headers ÊòØÂê¶‰∏ÄËá¥");
      $done({ status: resp.statusCode, body: bodyText });
      return;
    } else {
      $notify("‚ùå ÂÖëÊç¢Â§±Ë¥•", "", `code=${o.code} msg=${o.message || ""}`);
    }
  } catch (e) {
    $notify("‚ùå JSON Ëß£ÊûêÂ§±Ë¥•", "", String(e));
  }
  $done();
}).catch(err => {
  $notify("‚ùå ËØ∑Ê±ÇÂºÇÂ∏∏", "", JSON.stringify(err));
  $done();
});
